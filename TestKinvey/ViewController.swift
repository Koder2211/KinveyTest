//
//  ViewController.swift
//  TestKinvey
//
//  Created by Santosh Surve on 3/30/16.
//  Copyright Â© 2016 mindscrub. All rights reserved.
//





import UIKit
import MapKit


class ViewController: UIViewController {
    
    @IBOutlet weak var tblView: UITableView!
     var jobRoles:[AnyObject] = []
    var uploadID:String = ""
   
 
    @IBOutlet weak var imgView2: UIImageView!
    

    override func viewDidLoad() {
        super.viewDidLoad()
        var map: MKMapItem;
        
        var data: NSKeyedArchiver;
//        NSString *filename = [NSHomeDirectory() stringByAppendingString:@"/Documents/albums.bin"];
//        NSData *data = [NSKeyedArchiver archivedDataWithRootObject:albums];
//        [data writeToFile:filename atomically:YES];
        
        
        // Do any additional setup after loading the view, typically from a nib.
       
        self.tblView.registerClass(UITableViewCell.self, forCellReuseIdentifier: "cell")
        
//        if KCSUser.activeUser() == nil {
//            KCSUser.createAutogeneratedUser(
//                [
//                    KCSUserAttributeEmail : "pranav@kinvey.com",
//                    KCSUserAttributeGivenname : "Pranav",
//                    KCSUserAttributeSurname : "Kinvey"
//                ],
//                completion: { (user: KCSUser!, errorOrNil: NSError!, result: KCSUserActionResult) -> Void in
//                    //do something
//                    
//                    let collection = KCSCollection(fromString: "Job-Roles", ofClass: JobRole.self)
//                    let store = KCSAppdataStore(collection: collection, options: nil)
//                    
//                    store.queryWithQuery(
//                        KCSQuery(),
//                        withCompletionBlock: {
//                            (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
//                            if errorOrNil == nil {
//                                NSLog("successfully loaded objects: %@", objectsOrNil)
//                                self.jobRoles = objectsOrNil
//                                self.tblView .reloadData()
//                                for var i = 0; i < self.jobRoles.count ; ++i {
//                                    let name = self.jobRoles[i].name
//                                    NSLog("Job-Role is : %@", name!)
//                                    
//                                }
//                            } else {
//                                NSLog("error occurred: %@", errorOrNil)
//                            }
//                        },
//                        withProgressBlock: nil
//                    )
//                    
//                }
//            )
//        } else {
//            //otherwise user is set and do something
//            NSLog("user: %@", KCSUser.activeUser().username)
//            
//            let collection = KCSCollection(fromString: "Job-Roles", ofClass: JobRole.self)
//            let store = KCSAppdataStore(collection: collection, options: nil)
//            
//            store.queryWithQuery(
//                KCSQuery(),
//                withCompletionBlock: {
//                    (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
//                    if errorOrNil == nil {
//                        NSLog("successfully loaded objects: %@", objectsOrNil)
//                        self.jobRoles = objectsOrNil
//                        self.tblView .reloadData()
//                        for var i = 0; i < self.jobRoles.count ; ++i {
//                            let name = self.jobRoles[i].name
//                            NSLog("Job-Role is : %@", name!)
//                            
//                        }
//                    } else {
//                        NSLog("error occurred: %@", errorOrNil)
//                    }
//                },
//                withProgressBlock: nil
//            )
//        }

        
        KCSUser.loginWithUsername(
            "mind1",
            password: "mind1",
            withCompletionBlock: { (user: KCSUser!, errorOrNil: NSError!, result: KCSUserActionResult) -> Void in
                if errorOrNil == nil {
                    //the log-in was successful and the user is now the active user and credentials saved
                    //hide log-in view and show main app content
                    KCSUser.activeUser()
                    
                    
                    //let tm = TrainingSessionManager()
                    //TrainingSessionManager.getSessionsForExtendedUser()
                
                    //self.deleteFile()
                    //self.downloadImage()
                    self.updateImage()
                    //self.fetchImages()
                    //self.updatePersonalProfileToKinvey()
                    //self.downloadImage()
                    
//                    let collection = KCSCollection(fromString: "Job-Roles", ofClass: JobRole.self)
//                    let store = KCSAppdataStore(collection: collection, options: nil)
//                    
//                    let store1 = KCSAppdataStore.storeWithOptions([
//                        KCSStoreKeyCollectionName : "Job-Roles",
//                        KCSStoreKeyCollectionTemplateClass : JobRole.self
//                        ])
//                    
//                    let jobRole1 = JobRole()
//                    jobRole1.name = "MyJobSantosh4"
//                    jobRole1.date = NSDate(timeIntervalSince1970: 1352149171)
                    
//                    store1.saveObject(
//                        jobRole1,
//                        withCompletionBlock: { (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
//                            if errorOrNil != nil {
//                                //save failed
//                                NSLog("Save failed, with error: %@", errorOrNil.localizedFailureReason!)
//                            } else {
//                                //save was successful
//                                NSLog("Successfully saved event (id='%@').", (objectsOrNil[0] as! NSObject).kinveyObjectId())
//                            }
//                        },
//                        withProgressBlock: nil
//                    )
//
//                    var q1: KCSQuery!
//                    q1 = KCSQuery(onField: "_id", usingConditional: .KCSIn, forValue: ["5660a5052458c6f60803493f"])
//                    
//                    store.queryWithQuery(
//                        KCSQuery(),
//                        withCompletionBlock: {
//                            (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
//                            if errorOrNil == nil {
//                                NSLog("successfully loaded objects: %@", objectsOrNil)
//                                self.jobRoles = objectsOrNil
//                                self.tblView .reloadData()
//                                for var i = 0; i < self.jobRoles.count ; ++i {
//                                    var jobrl: JobRole?
//                                    jobrl = self.jobRoles[self.jobRoles.count-i-1] as! JobRole
//                                    
//                                    print(jobrl!.name)
//                                    
//                                   // var comments = jobrl!.comments
////                                    if(jobrl!.fileInfo != nil){
////                                        let _id = jobrl!.fileInfo["id"]
////                                       
////                                    print(jobrl?.fileInfo!._id)
////                                    }
////                                    
////                                    for var j = 1; j < comments?.count; j++ {
////                                        let commentDict = comments![j]
////                                        
////                                        let prof_id = commentDict["profile_id"]
////                                        print("Profile_id is \(prof_id!)")
////                                    }
////                                    
////                                    print(comments)
//                                    
//                                    
//                                }
//                            } else {
//                                NSLog("error occurred: %@", errorOrNil)
//                            }
//                        },
//                        withProgressBlock: nil
//                    )
                    

                    
                } 
            }
        )
        
        
    }
    
   func deleteFile()
   {
    let IDs :[String] = ["",""];
    
    for ID in IDs {
        print(ID)
        KCSFileStore.downloadFile(ID, options: nil, completionBlock: { (pictures, error) in
            if let pictures = pictures as? [KCSFile] {
                for picture in pictures {
                    print(picture)
                }
            }
            }, progressBlock: nil)
    }
    
//    KCSFileStore.deleteFile(
//        "fcadf742-a897-41c0-b3b1-b280033a90b3",
//        completionBlock: { (count: UInt, errorOrNil: NSError!) -> Void in
//            
//    }    )
    }
    
    func fetchImages()
    {
        var skip: Int = 0
        let query = KCSQuery()
        query.limitModifer = KCSQueryLimitModifier(limit: 20)
        //query.skipModifier = KCSQuerySkipModifier(count: 2)
        //let query = KCSQuery(onField: "name", withExactMatchForValue: "Ronald")
        let dataSort = KCSQuerySortModifier(field: KCSMetadataFieldLastModifiedTime, inDirection: KCSSortDirection.Descending)
        query.addSortModifier(dataSort)
        
        KCSFileStore.downloadDataByQuery(query,
                                         completionBlock: {
                                            
                                            (downloadedResources: [AnyObject]!, error: NSError!) -> Void in
                                            
//                                            guard error == nil else
//                                            {
//                                                print("Error")
//                                                return
//                                            }
                                            guard downloadedResources.count > 0 else
                                            {
                                                print("No results")
                                                //completion(status: "No results", fetchedImages: nil)
                                                return
                                            }
                                           var images = [UIImage]()
                                            for resource in downloadedResources
                                            {
                                                print("resource => \(resource)")
                                                var file: KCSFile
                                                file = resource as! KCSFile
                                                var creationTime: NSDate? = nil
                                                if file.metadata != nil
                                                {
                                                    creationTime = file.metadata.creationTime()
                                                }
                                                else
                                                {
                                                    print("file.metadata == nil\n")
                                                }
                                                
                                               // let imgObj = UIImage(contentsOfFile: file.localURL.path!)
                                                //let imgObj = UIImage(fileId: file.fileId,
                                                //    imageData: file.data,
                                                 //   creationDate: creationTime)
                                                //images.append(imgObj)
                                            }
                                            
                                           // skip += 8
                                            //completion(status: "Success", fetchedImages: images)
            },
                                         progressBlock: nil
        )
    }
    
    func downloadImage()
    {
        
        
        
        
        let attrib = "xyzzzzzz\\notes\\AFSASDA-ASDASDASD-ASDASDAD-ASDASDASDA-ASDASDADSA\\index.html"
        
        let pngQuery = KCSQuery(onField: KCSFileFileName, withExactMatchForValue: attrib as! NSObject)
        
        KCSAppdataStore.storeWithOptions(<#T##options: [NSObject : AnyObject]!##[NSObject : AnyObject]!#>)
        
        KCSFileStore.downloadData("2d65f25a-b149-424c-8666-e6dac8709881",
                                         requestConfiguration: nil,
                                         completionBlock: { (downloadedResources: [AnyObject]!, error: NSError!) -> Void in
                                            if error == nil {
                                                
                                                
                                                //extract just the Value field from the entities
                                                
                                                
                                                let file = downloadedResources[0] as! KCSFile
                                                
                                                //let fileURL = file.localURL
                                                //let image = UIImage(contentsOfFile: fileURL.path!)
                                                let image = UIImage(data: file.data!)
                                                
                                                
                                                self.imgView2.image = image
                                                if let url = file.localURL {
                                                    print(url)
                                                }
                                                
                                            } else {
                                                print("Got an error: ", error)
                                            }
            },
                                         progressBlock: nil
        )

        
        
        
        
//        KCSFileStore.downloadFileByQuery(pngQuery,
//                                         requestConfiguration: nil,
//                                         completionBlock: { (downloadedResources: [AnyObject]!, error: NSError!) -> Void in
//                                            if error == nil {
//                                                
//                                                
//                                                //extract just the Value field from the entities
//                                                
//                                                
//                                                let file = downloadedResources[0] as! KCSFile
//                                                
//                                                let fileURL = file.localURL
//                                                let image = UIImage(contentsOfFile: fileURL.path!)
//                                                
//                                                self.imgView2.image = image
//                                                print(file.localURL)
//                                                
//                                            } else {
//                                                print("Got an error: ", error)
//                                            }
//            },
//                                         progressBlock: nil
//        )
//        
        
    }
    
    func updateImage()
    {
        //let image = UIImage(named: "example.png")
        let data = UIImageJPEGRepresentation(UIImage(named: "reminder152.png")!,0.9) //convert to a 90% quality jpeg
        
        
        KCSFileStore.uploadData(data,
                                options: [
                                    KCSFileFileName : "mtexture11.png",
                                    KCSFileMimeType : "image/png",
                                    
                                    
            ],
                                completionBlock: { (uploadInfo: KCSFile!, error: NSError!) -> Void in
                                    
                                    
                                    //self.assignProfilePictureIdToUser(KCSUser.activeUser(), picture: uploadInfo)
                                    self.uploadID = uploadInfo.kinveyObjectId()
                                    KCSUser.activeUser().setValue(uploadInfo, forAttribute: "avatar2")
                                    
                                   // Entry created in "users" collection after persisting KCSFile object
                                   // {
                                   //     "_type": "KinveyFile",
                                   //     "_id": "c456acfc-65fd-4a73-9f2f-ed0e990066e2"
                                   // }
                                    
                                    KCSUser.activeUser().saveWithCompletionBlock({ (done: [AnyObject]!, error: NSError!) in
                                        if error == nil
                                        {
                                            NSLog("Saved Avatar object")
                                            
                                            
                                            let collection = KCSCollection(fromString: "Job-Roles", ofClass: JobRole.self)
                                            let store = KCSAppdataStore(collection: collection, options: nil)
                                            
                                            
                                            
                                            let jobRole1 = JobRole()
                                            jobRole1.name = "Manav44441111"
                                            //jobRole1.date = nil
                                            //jobRole1.fileInfo = nil
                                            
                                            let jobRole2 = JobRole()
                                            jobRole2.name = "Manav33335555"
                                            //jobRole2.date = NSDate()
                                            //jobRole2.fileInfo = nil
                                            
                                            var arr: NSMutableArray? = []
                                            arr!.addObject(jobRole1)
                                            arr!.addObject(jobRole2)
                                            
                                            //jobRole1.data = arr;
                                            
//                                            var data =  try NSJSONSerialization.dataWithJSONObject(arr,options: NSJSONWritingOptions.PrettyPrinted)
//                                            
//                                            
//                                            let jsonString = NSString(data: data!, encoding: NSUTF8StringEncoding)
                                            
                                            
                                            store.saveObject(
                                            arr!,
                                                withCompletionBlock: { (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
                                                    if errorOrNil != nil {
                                                        //save failed
                                                        NSLog("Save failed, with error: %@", errorOrNil.localizedFailureReason!)
                                                    } else {
                                                        //save was successful
                                                        NSLog("Successfully saved '%d objects.", (objectsOrNil.count))
                                                    }
                                                },
                                                withProgressBlock: nil
                                            )
                                            
                                            /* Entry created in Job-Roles collection after persisting KCSFile object
                                             {
                                                "_id": "c456acfc-65fd-4a73-9f2f-ed0e990066e2",
                                                "_filename": "texture1.png",
                                                "size": 7480,
                                                "mimeType": "image/png",
                                                "_acl": {
                                                    "creator": "56fba1159120390e4c27452c"
                                                },
                                                "_kmd": {
                                                    "lmt": "2016-04-21T23:13:25.095Z",
                                                    "ect": "2016-04-21T23:13:25.095Z"
                                                },
                                                "_downloadURL": "http://storage.googleapis.com/3362266a446f4343a4a740f9b431df85/c456acfc-65fd-4a73-9f2f-ed0e990066e2/texture1.png?GoogleAccessId=558440376631@developer.gserviceaccount.com&Expires=1461289164&Signature=bPp20cxKD3bWZZHbymHTTa7PY8dC7ivBi3LOlVZrDaR2p2E28Y8ZMlkIRujk9EE1XtFH2ucB4Nzq1Sh8kPfrhxW9nOCOShmhmxesxdNV9P54FsblS4%2B6OdJO6mwPLjr7xnubmq9Vul%2BLYuzWya9DQxxY93fB01FU0qh95M414YE%3D",
                                                "_expiresAt": "2016-04-22T01:39:24.435Z",
                                                "_type": "KinveyFile"
                                            }*/
                                            
                                            

                                            
                                        }
                                    })
                                    
                                    
                                    
                                                                     
                                    self.downloadImage()
                                    
                                    
                                    
            },
                                progressBlock: { (objects: [AnyObject]!, percentComplete: Double) -> Void in
            }
        )
    }
    
    func queryUser()
    {
        let user1: KCSUser
        user1 = KCSUser.activeUser()
        
        let query: KCSQuery
        //query.addQueryOnField("username", withExactMatchForValue: "test123")
        
    }
    
    func updatePersonalProfileToKinvey()
    {
        let user1: KCSUser
        user1 = KCSUser.activeUser()
    // update user skipper info
    
//    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@"Profile"];
//    request.sortDescriptors = @[[NSSortDescriptor sortDescriptorWithKey:@"name" ascending:NO]];
//    NSError *error = nil;
//    
//    NSArray *profiles = [[self.cdt backgroundManagedObjectContext] executeFetchRequest:request error:&error];
//    if ([profiles count] == 1) {
//    Profile *userProfile = [profiles lastObject];
//    //NSLog(@"user: %@", [userProfile description]);
//    
//    if ([[userProfile valueForKey:@"ytdDMG"] floatValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"ytdDMG"] forAttribute:@"ytdDMG"];
//    } else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"ytdDMG"];
//    
//    if ([[userProfile valueForKey:@"ytdTrips"] intValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"ytdTrips"] forAttribute:@"ytdTrips"];
//    } else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"ytdTrips"];
//    
//    if ([[userProfile valueForKey:@"ytdSailingTime"] floatValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"ytdSailingTime"] forAttribute:@"ytdSailingTime"];
//    }  else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"ytdSailingTime"];
//    
//    if ([[userProfile valueForKey:@"overallDMG"] floatValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"overallDMG"] forAttribute:@"overallDMG"];
//    } else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"overallDMG"];
//    
//    if ([[userProfile valueForKey:@"overallTrips"] intValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"overallTrips"] forAttribute:@"overallTrips"];
//    } else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"overallTrips"];
//    
//    if ([[userProfile valueForKey:@"overallSailingTime"] floatValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"overallSailingTime"] forAttribute:@"overallSailingTime"];
//    } else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"overallSailingTime"];
//    
//    [user saveWithCompletionBlock:^(NSArray *objectsOrNil, NSError *errorOrNil) {
//    NSLog(@"saved user: %@ - %@", @(errorOrNil == nil), errorOrNil);
//    [[NSNotificationCenter defaultCenter] postNotificationName:KINVEY_SYNC_DONE object:self];
//    
//    }];
//    }
        
        
        user1.saveWithCompletionBlock {
            (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
            if errorOrNil == nil {
                NSLog("successfully saved user object: %@", objectsOrNil)
                
            } else {
                NSLog("error occurred: %@", errorOrNil)
            }
        }
    }
    
    // number of rows in table view
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.jobRoles.count
    }
    
    // create a cell for each table view row
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        
        let cell:UITableViewCell = self.tblView.dequeueReusableCellWithIdentifier("cell") as UITableViewCell!
        let jobrl2 = self.jobRoles[indexPath.row]
        cell.textLabel?.text = jobrl2.name
        
        return cell
    }
    

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }


}


func downloadImage()
{
    let attrib = "xyzzzzzz\\notes\\AFSASDA-ASDASDASD-ASDASDAD-ASDASDASDA-ASDASDADSA\\index.html"
    
    let pngQuery = KCSQuery(onField: KCSFileFileName, withExactMatchForValue: attrib as! NSObject)
    
    KCSFileStore.downloadFileByQuery(pngQuery,
                                     requestConfiguration: nil,
                                     completionBlock: { (downloadedResources: [AnyObject]!, error: NSError!) -> Void in
                                        if error == nil {
                                            
                                            
                                            //extract just the Value field from the entities
                                            
                                            
                                            let file = downloadedResources[0] as! KCSFile
                                            
                                            let fileURL = file.localURL
                                            let image = UIImage(contentsOfFile: fileURL.path!)
                                            
                                           // display this image in some UIImageView
                                            print(file.localURL)
                                            
                                        } else {
                                            print("Got an error: ", error)
                                        }
        },
                                     progressBlock: nil
    )
    
    
}

func uploadImage()
{

    let data = UIImageJPEGRepresentation(UIImage(named: "abcd.png")!,0.9) //convert to a 90% quality jpeg
    
    
    KCSFileStore.uploadData(data,
                            options: [
                                KCSFileFileName : "xyzzzzzz\\notes\\AFSASDA-ASDASDASD-ASDASDAD-ASDASDASDA-ASDASDADSA\\index.html",
                                KCSFileMimeType : "image/png",
                                
                                
        ],
                            completionBlock: { (uploadInfo: KCSFile!, error: NSError!) -> Void in
                                
                                // steps to do after successful image upload
                                
                                
                                
        },
                            progressBlock: { (objects: [AnyObject]!, percentComplete: Double) -> Void in
        }
    )
}




