//
//  ViewController.swift
//  TestKinvey
//
//  Created by Santosh Surve on 3/30/16.
//  Copyright Â© 2016 mindscrub. All rights reserved.
//

import UIKit


class ViewController: UIViewController {
    
    @IBOutlet weak var tblView: UITableView!
     var jobRoles:[AnyObject] = []

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
       
        self.tblView.registerClass(UITableViewCell.self, forCellReuseIdentifier: "cell")
        
//        if KCSUser.activeUser() == nil {
//            KCSUser.createAutogeneratedUser(
//                [
//                    KCSUserAttributeEmail : "pranav@kinvey.com",
//                    KCSUserAttributeGivenname : "Pranav",
//                    KCSUserAttributeSurname : "Kinvey"
//                ],
//                completion: { (user: KCSUser!, errorOrNil: NSError!, result: KCSUserActionResult) -> Void in
//                    //do something
//                    
//                    let collection = KCSCollection(fromString: "Job-Roles", ofClass: JobRole.self)
//                    let store = KCSAppdataStore(collection: collection, options: nil)
//                    
//                    store.queryWithQuery(
//                        KCSQuery(),
//                        withCompletionBlock: {
//                            (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
//                            if errorOrNil == nil {
//                                NSLog("successfully loaded objects: %@", objectsOrNil)
//                                self.jobRoles = objectsOrNil
//                                self.tblView .reloadData()
//                                for var i = 0; i < self.jobRoles.count ; ++i {
//                                    let name = self.jobRoles[i].name
//                                    NSLog("Job-Role is : %@", name!)
//                                    
//                                }
//                            } else {
//                                NSLog("error occurred: %@", errorOrNil)
//                            }
//                        },
//                        withProgressBlock: nil
//                    )
//                    
//                }
//            )
//        } else {
//            //otherwise user is set and do something
//            NSLog("user: %@", KCSUser.activeUser().username)
//            
//            let collection = KCSCollection(fromString: "Job-Roles", ofClass: JobRole.self)
//            let store = KCSAppdataStore(collection: collection, options: nil)
//            
//            store.queryWithQuery(
//                KCSQuery(),
//                withCompletionBlock: {
//                    (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
//                    if errorOrNil == nil {
//                        NSLog("successfully loaded objects: %@", objectsOrNil)
//                        self.jobRoles = objectsOrNil
//                        self.tblView .reloadData()
//                        for var i = 0; i < self.jobRoles.count ; ++i {
//                            let name = self.jobRoles[i].name
//                            NSLog("Job-Role is : %@", name!)
//                            
//                        }
//                    } else {
//                        NSLog("error occurred: %@", errorOrNil)
//                    }
//                },
//                withProgressBlock: nil
//            )
//        }

        
        KCSUser.loginWithUsername(
            "test123",
            password: "test123",
            withCompletionBlock: { (user: KCSUser!, errorOrNil: NSError!, result: KCSUserActionResult) -> Void in
                if errorOrNil == nil {
                    //the log-in was successful and the user is now the active user and credentials saved
                    //hide log-in view and show main app content
                    KCSUser.activeUser()
                    
                    self.updatePersonalProfileToKinvey()
                    
                    let collection = KCSCollection(fromString: "Job-Roles", ofClass: JobRole.self)
                    let store = KCSAppdataStore(collection: collection, options: nil)
                    
                    store.queryWithQuery(
                        KCSQuery(),
                        withCompletionBlock: {
                            (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
                            if errorOrNil == nil {
                                NSLog("successfully loaded objects: %@", objectsOrNil)
                                self.jobRoles = objectsOrNil
                                self.tblView .reloadData()
                                for var i = 0; i < self.jobRoles.count ; ++i {
                                    let name = self.jobRoles[i].name
                                    NSLog("Job-Role is : %@", name!)
                                    
                                }
                            } else {
                                NSLog("error occurred: %@", errorOrNil)
                            }
                        },
                        withProgressBlock: nil
                    )
                    

                    
                } 
            }
        )
        
        
    }
    
    func updatePersonalProfileToKinvey()
    {
        let user1: KCSUser
        user1 = KCSUser.activeUser()
    // update user skipper info
    
//    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@"Profile"];
//    request.sortDescriptors = @[[NSSortDescriptor sortDescriptorWithKey:@"name" ascending:NO]];
//    NSError *error = nil;
//    
//    NSArray *profiles = [[self.cdt backgroundManagedObjectContext] executeFetchRequest:request error:&error];
//    if ([profiles count] == 1) {
//    Profile *userProfile = [profiles lastObject];
//    //NSLog(@"user: %@", [userProfile description]);
//    
//    if ([[userProfile valueForKey:@"ytdDMG"] floatValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"ytdDMG"] forAttribute:@"ytdDMG"];
//    } else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"ytdDMG"];
//    
//    if ([[userProfile valueForKey:@"ytdTrips"] intValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"ytdTrips"] forAttribute:@"ytdTrips"];
//    } else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"ytdTrips"];
//    
//    if ([[userProfile valueForKey:@"ytdSailingTime"] floatValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"ytdSailingTime"] forAttribute:@"ytdSailingTime"];
//    }  else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"ytdSailingTime"];
//    
//    if ([[userProfile valueForKey:@"overallDMG"] floatValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"overallDMG"] forAttribute:@"overallDMG"];
//    } else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"overallDMG"];
//    
//    if ([[userProfile valueForKey:@"overallTrips"] intValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"overallTrips"] forAttribute:@"overallTrips"];
//    } else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"overallTrips"];
//    
//    if ([[userProfile valueForKey:@"overallSailingTime"] floatValue] >=0) {
//    [user setValue:[userProfile valueForKey:@"overallSailingTime"] forAttribute:@"overallSailingTime"];
//    } else [user setValue:[NSNumber numberWithInt:0] forAttribute:@"overallSailingTime"];
//    
//    [user saveWithCompletionBlock:^(NSArray *objectsOrNil, NSError *errorOrNil) {
//    NSLog(@"saved user: %@ - %@", @(errorOrNil == nil), errorOrNil);
//    [[NSNotificationCenter defaultCenter] postNotificationName:KINVEY_SYNC_DONE object:self];
//    
//    }];
//    }
        
        
        user1.saveWithCompletionBlock {
            (objectsOrNil: [AnyObject]!, errorOrNil: NSError!) -> Void in
            if errorOrNil == nil {
                NSLog("successfully saved user object: %@", objectsOrNil)
                
            } else {
                NSLog("error occurred: %@", errorOrNil)
            }
        }
    }
    
    // number of rows in table view
    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.jobRoles.count
    }
    
    // create a cell for each table view row
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        
        let cell:UITableViewCell = self.tblView.dequeueReusableCellWithIdentifier("cell") as UITableViewCell!
        let name = self.jobRoles[indexPath.row].name
        cell.textLabel?.text = name
        
        return cell
    }
    

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }


}

